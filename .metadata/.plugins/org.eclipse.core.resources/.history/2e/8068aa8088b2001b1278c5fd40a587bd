package com.sumbab.sumbab.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.fasterxml.jackson.databind.JsonNode;
import com.sumbab.sumbab.model.login.LoginService;
import com.sumbab.sumbab.model.login.MemberVo;

@Controller
public class LoginController {
	
	@Autowired
	private LoginService loginService;
	
	@RequestMapping(value = "/login/login", method = RequestMethod.GET)
	public String loginGet(@ModelAttribute("memberVo") MemberVo vo, Model model, HttpSession session) {
		
		String kakaoUrl = KakaoController.getAuthorizationUrl(session);
		model.addAttribute("kakao_url", kakaoUrl);
		
		return "/login/login";
	}

	@RequestMapping(value = "/login/login", method = RequestMethod.POST)
	public String login(@ModelAttribute("memberVo") MemberVo vo,
			Model model,
			HttpSession session,
			HttpServletResponse response) {
		boolean result = loginService.login(vo, session);
		if(result == true) {
			
			session.getAttribute("vo");
						
			return "/login/loginSuccess";
		
		}else {
			
		return "redirect:/login/login";
		}
	}


	@RequestMapping(value="/login/logout",method = RequestMethod.GET)
	public String logout(MemberVo memberVo, HttpSession session) {
		
		MemberVo vo = (MemberVo) session.getAttribute("vo");
		if(vo != null) {
			loginService.logout(session);
			
			return "/login/logout";
		}
		
		return "/login/logout";
		
	}

	
	
		@RequestMapping(value="/login/memberFind", method=RequestMethod.GET)
		public String memberFindGet(@ModelAttribute("memberVo") MemberVo vo) {
			return "/login/memberFind";
		}
	
		
	@RequestMapping(value="/login/idFindResult", method=RequestMethod.POST)
	public String idFindPost(@ModelAttribute("memberVo") MemberVo vo, Model model) {
		
		 MemberVo result = loginService.idFind(vo);
		
		
		 if(result != null) {
			String id = result.getId();
			model.addAttribute("idFind", id);
			
			return "/login/idFindResult";
		
		 }else {
			
				
			return "redirect:/login/memberFind";
		 }
	
			
		 
	}

	@RequestMapping(value="/login/pwdFindResult",method=RequestMethod.POST)
	public String pwdFindPost(@ModelAttribute("memberVo") MemberVo vo, Model model) {
		
		MemberVo result = loginService.pwdFind(vo);
	
		if(result != null) {
			String pwd = result.getPwd();
			model.addAttribute("pwdFind", pwd);
		
			return "/login/pwdFindResult";
			
		}else {
			
			
			return "redirect:/login/memberFind";
		}
		
		
		
		
	}
	
	
	
	@RequestMapping(value = "/login/main", produces = "application/json", method = RequestMethod.GET)
	public ModelAndView kakaoLogin(@RequestParam("code") String code,
			@ModelAttribute("memberVo") MemberVo vo,
			HttpServletRequest request,
			HttpServletResponse response,
			HttpSession session) throws Exception { 
		try {
		ModelAndView mav = new ModelAndView();

		String kLU = KakaoController.getLogoutUrl(session);
		mav.addObject("kLogoutUrl", kLU);
		

		JsonNode node = KakaoController.getAccessToken(code);
		session.setAttribute("access_Token", node);
		System.out.println("node" + node);
		// accessToken�뿉 �궗�슜�옄�쓽 濡쒓렇�씤�븳 紐⑤뱺 �젙蹂닿� �뱾�뼱�엳�쓬
		JsonNode accessToken = node.get("access_token");
		
		String at = accessToken.toString();
		System.out.println("at:" + at);
		session.setAttribute("access_Token", at);
		
		// �궗�슜�옄�쓽 �젙蹂�
		JsonNode userInfo = KakaoController.getKakaoUserInfo(accessToken);
		
		
		String kemail;
		String kname;

		
		JsonNode properties = userInfo.path("properties");
		JsonNode kakao_account = userInfo.path("kakao_account");
		System.out.println(properties);
		
		
		kemail = kakao_account.path("email").asText();
		System.out.println("1" + kemail);
		kname = properties.path("nickname").asText();

		
		session.setAttribute("kemail", kemail);
		session.setAttribute("kname", kname); 
		

		mav.setViewName("/login/loginSuccess"); 
		
		
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("kemail", session.getAttribute("kemail"));
		map.put("kname", session.getAttribute("kname"));
		boolean result = loginService.kaLoginSelect(map);
		
		//媛믪씠 �엳�떎 true
		if(result) {
			
		
			//db媛� �꽭�뀡�쑝濡� �깮�꽦("Vo")
			loginService.kaLoginSelect2(map, session);
			
		//媛믪씠 �뾾�떎 false	
		}else {
			
			loginService.kaLoginInsert(map);
			loginService.kaLoginSelect2(map, session);
		
		}
		
		
		
		return mav;
	// end kakaoLogin()
	
	}catch (Exception e) {
		
		ModelAndView mav = new ModelAndView();
		
		String kakaoUrl = KakaoController.getAuthorizationUrl(session);
		mav.addObject("kakao_url", kakaoUrl);
		
		//�깉濡쒓퀬移⑥떆 硫붿씤 �럹�씠吏�濡� 諛붽씀湲�???
		mav.setViewName("/login/login"); 
		return mav;
	}
		
	}

	
	//濡쒓렇�븘�썐 �슂泥� 
		@RequestMapping(value="/sb/kalogout",method = RequestMethod.GET)
		public String kalogout(HttpSession session, Model model) throws Exception {
			
			
			
		
		
			
			String aT = (String) session.getAttribute("access_Token");
			
			if(aT != null) {
				
				
	            
				

				loginService.kalogout(session);
				
			
				return "/login/kalogout";
			}
			
			return "/login/kalogout";
			
		}


		//정민만듬
		@RequestMapping(value = "/memberDeleteView", method = RequestMethod.GET)
		public String memberDeleteView(HttpSession session) {
			

			return "member/memberDeleteView";
		}

		
		
		//정민만듬 시발 로그인 좆같이만들었네;;;; 아예돌아가지가않는다...
		@RequestMapping(value = "/memberDelete", method = RequestMethod.POST)
		public String memberDeleteView(MemberVo memberVO, HttpSession session, RedirectAttributes rttr) {
			
			MemberVo member = (MemberVo) session.getAttribute("vo");
			
			String sessionPwd = member.getPwd();
			
			String voPwd = memberVO.getPwd();
			
			System.out.println(sessionPwd+ "�꽭�뀡�뿰寃곗씠 �릺�뿀援�...");
			System.out.println(voPwd + "洹쇰뜲 �쇅洹몃윺源뚮굹..");
			System.out.println(member);
			
			if(!(sessionPwd.equals(voPwd))) {
				rttr.addFlashAttribute("msg", false);
				return "redirect:/membmer/memberDeleteView";
			}
			loginService.memberDelete(memberVO);
			session.invalidate();
			return "list";
		}

		

}









	
	

